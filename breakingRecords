import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'breakingRecords' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts INTEGER_ARRAY scores as parameter.
     */

    public static List<Integer> breakingRecords(List<Integer> scores) {
    //List<Integer> scores= Arrays.asList(3,4,21,36,10,28,35,5,24,42);
    //10,5,20,20,4,5,2,25,1
    // Write your code here
             int max=0,min=0;
        int currentrec=0;
           int prevrec=scores.get(0);
            int minval = prevrec;
        for (Integer singleScore: scores) {
            currentrec=singleScore;
           if(prevrec<currentrec){
               max++;
               prevrec=currentrec;
           }//check for minvalue
            else {
               if(minval>currentrec){
                   min++;
             minval=currentrec;
           }
           }
       }
       return Arrays.asList(max,min);

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> scores = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> result = Result.breakingRecords(scores);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining(" "))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
